- name: Define MySQL deployment
  template:
    src: "mysql-deployment.yaml.j2"
    dest: "/root/joget/mysql-deployment.yaml"
    mode: '0755'

- name: Define Joget deployment
  template:
    src: "joget-dx8-tomcat9-deployment.yaml.j2"
    dest: "/root/joget/joget-dx8-tomcat9-deployment.yaml"
    mode: '0755'

- name: Define change admin password script
  template:
    src: "change_joget_admin_password.sh.j2"
    dest: "/root/joget/change_joget_admin_password.sh"
    mode: '0755'

- name: Generate hashed admin password
  ansible.builtin.shell: "echo -n '{{ auth_token }}' | md5sum | awk '{print $1}'"
  register: joget_password

- name: Set joget_admin_password with hashed value
  ansible.builtin.set_fact:
    joget_admin_password: "{{ joget_password.stdout }}"

- name: "Define MySQL script"
  template:
    src: "jwdb-mysql.sql.j2"
    dest: "/root/joget/jwdb-mysql.sql"
    mode: "0755"

- name: Check if ConfigMap exists
  ansible.builtin.shell: "kubectl -n {{ joget_namespace }} get configmap jwdb-sql-config --ignore-not-found"
  register: configmap_check
  changed_when: false
  failed_when: false

- name: Create ConfigMap jwdb-sql-config if it does not exist
  ansible.builtin.shell: "kubectl -n {{ joget_namespace }} create configmap jwdb-sql-config --from-file=/root/joget/jwdb-mysql.sql"
  when: configmap_check.stdout == ""

- name: Install mysql using 'mysql-deployment.yaml'
  shell: |
    kubectl apply -f /root/joget/mysql-deployment.yaml 
    sleep 60
    kubectl -n {{ joget_namespace }} rollout restart deployment --selector=app=mysql

- name: Wait for MySQL pod to be ready
  shell: |
    kubectl get pods -n {{ joget_namespace }} -l app=mysql -o jsonpath='{.items[0].status.phase}'
  register: mysql_pod_status
  until: mysql_pod_status.stdout == "Running"
  retries: 10
  delay: 15
  changed_when: false

- name: Install joget using 'joget-dx8-tomcat9-deployment.yaml'
  shell: |
    kubectl apply -f /root/joget/joget-dx8-tomcat9-deployment.yaml
    sleep 120
    kubectl -n {{ joget_namespace }} rollout restart deployment --selector=app=joget-dx8-tomcat9

- name: Retrieve load balancer IP
  ansible.builtin.shell: "kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}'"
  register: lb_ip
  failed_when: false
  # ignore_errors: yes  # Ignore the error for now to handle it gracefully

- name: Set load balancer IP variable
  set_fact:
    loadbalancer_ip: "{{ lb_ip.stdout | default('') }}"  # Use default to handle missing stdout

- name: Debug load balancer IP
  debug:
    msg: "Load balancer IP is: {{ loadbalancer_ip }}"

- name: Save load balancer IP to file
  copy:
    content: "{{ lb_ip.stdout if lb_ip.rc == 0 else 'IP not available' }}"
    dest: /root/joget/loadbalancer_ip.txt
  #delegate_to: localhost  # Save to localhost
  when: lb_ip.rc == 0

# - name: Wait for deployments
#   shell: bash /root/check_deployment.sh {{joget_namespace}}


# - name: Enable openimis backend
#   set_fact:
#     open_imis_backend_enabled: true

# - name: Copy chart overrides values
#   template:
#     src: "demo-builder-values.yaml.j2"
#     dest: "/root/govstack/joget_backend/sandbox-demo-builder/use-cases/joget-full/demo-builder-values.yaml"
#     mode: '0755'

# - name: Install joget with openimis backend
#   shell: |
#     cd /root/govstack/joget_backend/sandbox-demo-builder/use-cases
#     helm dependency update ./joget-full/
#     helm upgrade --install joget ./joget-full/ --create-namespace --namespace {{joget_namespace}} --values /root/govstack/joget_backend/sandbox-demo-builder/use-cases/joget-full/demo-builder-values.yaml

# - name: Wait for deployments
#   shell: bash /root/check_deployment.sh {{joget_namespace}}
